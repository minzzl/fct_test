cmake_minimum_required(VERSION 3.10)

project(lcd_app)

# Print the CMAKE_SOURCE_DIR
message("CMAKE_SOURCE_DIR: ${CMAKE_SOURCE_DIR}")

set(CMAKE_C_STANDARD 99) # C99
set(CMAKE_CXX_STANDARD 17) # C17
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/out)

set(CMAKE_BUILD_TYPE Debug)

# Add FB01_BOARD option
option(FB01_BOARD "Build for FB01 board" OFF)

# Find Git executable
find_package(Git REQUIRED)

# Get Git version
execute_process(
    COMMAND ${GIT_EXECUTABLE} describe --tags --always
    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
    OUTPUT_VARIABLE GIT_VERSION
    OUTPUT_STRIP_TRAILING_WHITESPACE
)

# Create a config header file
configure_file(
    ${CMAKE_SOURCE_DIR}/inc/version.h.in
    ${CMAKE_BINARY_DIR}/inc/version.h
)

# Include directories
include_directories(
    ./inc/
    ./inc/lvgl/
    ./inc/lvgl/src/display/lv_display/
    # ./inc/lvgl/src/libs/lv_qrcode/  # 추가된 경로
)

# Conditionally find SDL2 package
if (NOT FB01_BOARD)
    find_package(SDL2 REQUIRED SDL2)
    link_directories(${PROJECT_SOURCE_DIR}/lib)
endif()

# Libraries (x86 Compatible) are located in the lib folder of the source code.
# For other Arch (For instance ARM), use appropriate libs and remove this line

# Specify the path to search for libraries
link_directories(${PROJECT_SOURCE_DIR}/lib)

# Source files for the entire project
FILE(GLOB_RECURSE SOURCES 
    ./src/*.c 
    ./src/app/*.c
    ./res/Images/*.c
    ./res/Fonts/*.c
)

# Conditionally add luna source files if FB01_BOARD is true
if (FB01_BOARD)
    FILE(GLOB_RECURSE LUNA_SOURCES 
        ./src/luna/*.c    # NetworkInfoService 소스 파일 경로
        ./src/data/*.c
    )
    list(APPEND SOURCES ${LUNA_SOURCES})

    find_package(PkgConfig REQUIRED)
    pkg_check_modules(GLIB REQUIRED glib-2.0)
    pkg_check_modules(LUNASERVICE2 REQUIRED luna-service2)
    pkg_check_modules(PBNJSON REQUIRED pbnjson_c)

    # Print the paths for PBNJSON
    message("PBNJSON_INCLUDE_DIRS: ${PBNJSON_INCLUDE_DIRS}")
    message("PBNJSON_LIBRARY_DIRS: ${PBNJSON_LIBRARY_DIRS}")
    message("PBNJSON_LIBRARIES: ${PBNJSON_LIBRARIES}")

    # Include directories for GLib, Luna Service2, and PBNJSON
    include_directories(${GLIB_INCLUDE_DIRS})
    include_directories(${LUNASERVICE2_INCLUDE_DIRS})
    include_directories(${PBNJSON_INCLUDE_DIRS})

    # Link directories for GLib, Luna Service2, and PBNJSON
    link_directories(${GLIB_LIBRARY_DIRS})
    link_directories(${LUNASERVICE2_LIBRARY_DIRS})
    link_directories(${PBNJSON_LIBRARY_DIRS})

    # Add compile options for GLib, Luna Service2, and PBNJSON
    add_compile_options(${GLIB_CFLAGS_OTHER})
    add_compile_options(${LUNASERVICE2_CFLAGS_OTHER})
    add_compile_options(${PBNJSON_CFLAGS_OTHER})
endif()

# Add executable for the entire project
add_executable(lcd_app ${SOURCES})

# Link libraries
if (FB01_BOARD)
    set(LVGL_LIB_PATH /usr/local/nano-sdk-x86_64/sysroots/aarch64-webos-linux/usr/lib)
    # 라이브러리를 찾음
    find_library(LVGL_LIB NAMES lvgl PATHS ${LVGL_LIB_PATH})
    find_library(LVGL_THORVG_LIB NAMES lvgl_thorvg PATHS ${LVGL_LIB_PATH})
    target_link_libraries(lcd_app ${LVGL_LIB} ${LVGL_THORVG_LIB} ${GLIB_LIBRARIES} ${LUNASERVICE2_LIBRARIES} ${PBNJSON_LIBRARIES} m pthread stdc++)
else()
    target_link_libraries(lcd_app liblvgl.so liblvgl_thorvg.so ${SDL2_LIBRARIES} m pthread stdc++)
endif()

# Set the output directory for the executable
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/bin)

# Function to get resource directory based on the executable's location


# Set dynamic paths using the constructed resource directory
set(LANGUAGE_PATH "Texts/")
set(CONF_BIN "Config/")
set(VERSION_FILE "version")
set(PRODUCT_TYPE "ProductType")
set(PRODUCT_VERSION "ProductVersion")
set(OPENSOURCE_LICENSE "openSource.txt")
set(URL_PATH "")

# set(LANGUAGE_PATH "/lg_rw/b2b-platform/lcd/Texts/")
# set(CONF_BIN "/lg_rw/b2b-platform/lcd/Config/")
# set(VERSION_FILE "/lg_rw/b2b-platform/lcd/version")
# set(HOSTNAME_FILE "/lg_rw/b2b-platform/lcd/hostname")
# set(URL_PATH "/lg_rw/b2b-platform/lcd/")

# Add compile options to ignore specific warnings
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wno-error=return-type -g")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-error=return-type -g")


target_compile_options(lcd_app PRIVATE
    "-DLANGUAGE_PATH=\"${LANGUAGE_PATH}\""
    "-DCONF_BIN=\"${CONF_BIN}\""
    "-DVERSION_FILE=\"${VERSION_FILE}\""
    "-DPRODUCT_TYPE=\"${PRODUCT_TYPE}\""
    "-DPRODUCT_VERSION=\"${PRODUCT_VERSION}\""
    "-DOPENSOURCE_LICENSE=\"${OPENSOURCE_LICENSE}\""
    "-DURL_PATH=\"${URL_PATH}\""
)

add_custom_target(clean-all
    COMMENT "Cleaning all build artifacts and temporary files"
    COMMAND ${CMAKE_COMMAND} -E remove ${CMAKE_BINARY_DIR}/CMakeCache.txt
    COMMAND ${CMAKE_COMMAND} -E remove_directory ${CMAKE_BINARY_DIR}/CMakeFiles
    COMMAND ${CMAKE_COMMAND} -E remove_directory ${CMAKE_BINARY_DIR}/out
    COMMAND ${CMAKE_COMMAND} -E remove ${CMAKE_BINARY_DIR}/Makefile
    COMMAND ${CMAKE_COMMAND} -E remove ${CMAKE_BINARY_DIR}/cmake_install.cmake
)

# Update lv_conf.h based on the board type
if (FB01_BOARD)
    set(LV_USE_SDL 0)
    set(LV_USE_LINUX_FBDEV 1)
else()
    set(LV_USE_SDL 1)
    set(LV_USE_LINUX_FBDEV 0)
endif()

configure_file(
    ${PROJECT_SOURCE_DIR}/inc/lv_conf.h.in
    ${PROJECT_SOURCE_DIR}/inc/lv_conf.h @ONLY
)


여기에 적절히 붙여 넣어줘. 
