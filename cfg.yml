import json
import subprocess
import argparse

def log(message):
    if args.debug:
        print(f"[log] {message}")

def check_package_ids(target_ids):
    try:
        result = subprocess.run(
            ["luna-send", "-f", "-n", "1", "luna://com.webos.applicationManager/listPackages", "{}"],
            capture_output=True,
            text=True,
            check=True
        )
        
        scan_response = json.loads(result.stdout)
        packages = scan_response.get("packages", [])
        found_ids = [package.get("id") for package in packages]
        
        all_found = True  # 모든 ID가 발견되었는지 여부를 추적
        
        for target_id in target_ids:
            if target_id not in found_ids:
                all_found = False
                log(f"Target ID {target_id} not found in the response.")
        
        if all_found:
            # 모든 ID가 발견된 경우 플래그를 기록
            with open('/lg_rw/fct_test/usb_write', 'w') as flag_file:
                flag_file.write("1\n")  # 성공 시 1 기록
            log("All target IDs found in the response.")
            return None  # 모든 ID가 발견된 경우
        else:
            # 하나라도 발견되지 않은 경우 플래그를 기록
            with open('/lg_rw/fct_test/usb_write', 'w') as flag_file:
                flag_file.write("0\n")  # 실패 시 0 기록
            return "One or more target IDs not found."

    except subprocess.CalledProcessError as e:
        return f"Command failed with error: {e}"
    except json.JSONDecodeError:
        return "Failed to decode JSON response."

def check_kernel_version(expected_version):
    try:
        result = subprocess.run(
            ["uname", "-r"],
            capture_output=True,
            text=True,
            check=True
        )
        kernel_version = result.stdout.strip()
        if kernel_version != expected_version:
            return f"Kernel version {kernel_version} does not match expected version {expected_version}."
        log("Kernel version OK.")
        return None  # 버전이 일치하는 경우
    except subprocess.CalledProcessError as e:
        return f"Command failed with error: {e}"

def check_ram_disk_version(expected_version):
    try:
        with open('/lg_ro/issue', 'r') as file:
            ram_disk_version = file.read().strip()
            if ram_disk_version != expected_version:
                return f"RAM Disk version {ram_disk_version} does not match expected version {expected_version}."
            log("RAM Disk version OK.")
            return None  # 버전이 일치하는 경우
    except Exception as e:
        return f"Failed to read RAM Disk version: {e}"
    
def check_model_number(expected_model):
    try:
        with open('/persist/model_number', 'r') as file:
            model_number = file.read().strip()
            if model_number != expected_model:
                return f"Model number {model_number} does not match expected model {expected_model}."
            log("Model number OK.")
            return None  # 일치하는 경우
    except Exception as e:
        return f"Failed to read model number: {e}"

def check_serial_number(expected_serial):
    try:
        with open('/persist/serial_number', 'r') as file:
            serial_number = file.read().strip()
            if serial_number != expected_serial:
                return f"Serial number {serial_number} does not match expected serial {expected_serial}."
            log("Serial number OK.")
            return None  # 일치하는 경우
    except Exception as e:
        return f"Failed to read serial number: {e}"

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Check package IDs, kernel version, RAM disk version, and serial number.")
    parser.add_argument('target_ids', type=str, help='Comma-separated list of target package IDs to check')
    parser.add_argument('expected_kernel_version', type=str, help='Expected kernel version to check')
    parser.add_argument('expected_ram_disk_version', type=str, help='Expected RAM disk version to check')
    parser.add_argument('expected_serial_number', type=str, help='Expected serial number to check')
    parser.add_argument('expected_model_number', type=str, help='Expected model number to check')
    parser.add_argument('--debug', action='store_true', help='Enable debug logging')
    
    args = parser.parse_args()
    
    target_ids = [id.strip() for id in args.target_ids.split(',')]
    
    # 패키지 ID 체크
    package_check = check_package_ids(target_ids)
    
    # 커널 버전 체크
    kernel_check = check_kernel_version(args.expected_kernel_version)
    
    # RAM 디스크 버전 체크
    ram_disk_check = check_ram_disk_version(args.expected_ram_disk_version)
    
    # 제번 번호 체크
    serial_check = check_serial_number(args.expected_serial_number)

    # 모델 번호 체크
    model_check = check_model_number(args.expected_model_number)

    # 최종 결과 출력
    fail_reasons = []
    if package_check:
        fail_reasons.append(package_check)
    if kernel_check:
        fail_reasons.append(kernel_check)
    if ram_disk_check:
        fail_reasons.append(ram_disk_check)
    if serial_check:
        fail_reasons.append(serial_check)
    if model_check:
        fail_reasons.append(model_check)
    
    if not fail_reasons:
        print("[SW version] OK")
    else:
        print(f"[SW version] FAIL: {', '.join(fail_reasons)}")
